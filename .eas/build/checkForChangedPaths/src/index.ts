// This file was autogenerated by `create-eas-build-function` command.
// Go to README.md to learn more about how to write your own custom build functions.

import {
  BuildStepContext,
  BuildStepInput,
  BuildStepInputValueTypeName,
} from '@expo/steps';
import spawnAsync from '@expo/spawn-async';
import picomatch from 'picomatch';
import { v4 as uuid } from 'uuid';

import { Filter as PathsFilter } from './filter';
import * as git from './git';

// Minimatch options used in all matchers
const MatchOptions = {
  dot: true,
};

class Filter extends PathsFilter {
  loadFromEntries(entries: string[]) {
    for (const entry of entries) {
      this.rules[entry] = [
        { status: undefined, isMatch: picomatch(entry, MatchOptions) },
      ];
    }
  }
}

interface FunctionInputs {
  config: BuildStepInput<
    BuildStepInputValueTypeName.JSON & {
      value: {
        /** The branch to compare against. */
        branch: string;
        /** The paths to check for changes. */
        paths: string[];
      };
    },
    true
  >;
}

async function checkForChangedPaths(
  ctx: BuildStepContext,
  {
    inputs,
  }: {
    inputs: FunctionInputs;
  },
): Promise<void> {
  const pathsToCheck = inputs.config.value.paths as unknown as string[];
  const branch: string =
    (inputs.config.value.branch as unknown as string) ?? 'main';
  const currentBranchName = uuid();
  const fetchHeadBranchName = uuid();
  await prepareGit(branch, currentBranchName, fetchHeadBranchName);
  const changedFiles = await git.getChanges(
    fetchHeadBranchName,
    currentBranchName,
  );
  const filter = new Filter();
  filter.loadFromEntries(pathsToCheck);
  const results = filter.match(changedFiles);
  ctx.logger.info(`Changed files: ${JSON.stringify(results)}`);
}

export default checkForChangedPaths;

async function prepareGit(
  branch: string,
  currentBranchName: string,
  fetchHeadBranchName: string,
) {
  await spawnAsync('git', ['checkout', '-b', currentBranchName], {
    stdio: 'ignore',
  });
  await spawnAsync('git', ['add', '.'], {
    stdio: 'ignore',
  });
  await spawnAsync('git', ['commit', '--allow-empty', '-m', 'tmp'], {
    stdio: 'ignore',
  });
  await spawnAsync('git', ['fetch', 'origin', branch], {
    stdio: 'ignore',
  });
  await spawnAsync('git', ['checkout', 'FETCH_HEAD'], {
    stdio: 'ignore',
  });
  await spawnAsync('git', ['switch', '-c', fetchHeadBranchName], {
    stdio: 'ignore',
  });
  await spawnAsync('git', ['checkout', currentBranchName], {
    stdio: 'ignore',
  });
}
